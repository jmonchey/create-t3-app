---
import clsx from "clsx";
import { getIsRtlFromUrl } from "../../languages";
import { Frontmatter, SIDEBAR, SIDEBAR_HEADER_MAP } from "../../config";
import Search from "./Search";

export interface Props {
  frontmatter?: Frontmatter;
  currentPage: string;
  isNotFound?: boolean;
}

const { frontmatter, currentPage, isNotFound } = Astro.props;
const isLanding = currentPage === "/" || !!isNotFound;
const hasTrailing = currentPage.endsWith("/");
const currentPageMatch = currentPage.slice(
  1,
  hasTrailing ? -1 : currentPage.length,
);
const isRtl = getIsRtlFromUrl(currentPage);

const langCode = frontmatter?.lang ?? "en";
const englishSidebar = SIDEBAR["en"];
const nativeSidebar = SIDEBAR[langCode];
let sidebar: Record<
  string,
  { text: string; link: string; isTranslated?: boolean }[]
> = englishSidebar;
if (langCode !== "en") {
  sidebar = Object.fromEntries(
    Object.entries(englishSidebar).map(([header, items]) => {
      // Set header to translated one if it exists
      const nativeHeader = SIDEBAR_HEADER_MAP[langCode][header] ?? header;

      const nativeItems = items.map((item) => {
        const match = Object.values(nativeSidebar)
          .flat()
          .find(
            ({ link: nativeLink }) =>
              // trailing slash + language code = 3 characters
              nativeLink.slice(3) === item.link.slice(3),
          );
        return {
          text: match?.text ?? item.text,
          link: match?.link ?? item.link,
          isTranslated: !!match,
        };
      });

      return [nativeHeader, nativeItems];
    }),
  );
}
---

<div class="w-full ml--40 md:ml-0 mb-6 mx-auto px-6 md:px-8 md:hidden">
  <Search isLanding={isLanding} client:idle />
</div>
<div
  dir="ltr"
  class="t3-scrollbar w-full lg:mb-12 h-full bg-default transition-colors duration-300"
>
  <ul
    dir={isRtl ? "rtl" : "ltr"}
    class="pb-28 pr-4 pl-4 md:pb-0 dark:text-t3-purple-50 text-slate-900"
  >
    {
      Object.entries(sidebar).map(([header, children]) => (
        <li>
          <div>
            <h2
              class={clsx(
                "pb-2 text-xl font-semibold transition-colors duration-300 sm:text-lg",
                {
                  // mobile menu on landing page
                  "text-slate-50": isLanding,
                },
              )}
            >
              {header}
            </h2>
            <ul class="mb-2">
              {children.map((child) => {
                const url = Astro.site?.pathname + child.link;
                const isActive = currentPageMatch === child.link;
                return (
                  <li>
                    <a
                      href={url}
                      aria-current={isActive ? "page" : false}
                      class={clsx([
                        "text-md text-t3-purple-800 hover:border-t3-purple-300/50 hover:bg-t3-purple-300/20 hover:text-t3-purple-400 dark:text-t3-purple-200 dark:hover:bg-t3-purple-300/10 dark:hover:text-t3-purple-100 block py-2 transition-colors [padding-start:16px]",
                        isActive &&
                          "border-t3-purple-300 bg-t3-purple-300/30 dark:bg-t3-purple-300/20 font-medium",
                        !isActive && "border-t3-purple-300/20",
                      ])}
                    >
                      <span>{child.text}</span>
                      {!child.isTranslated && langCode !== "en" && (
                        <span class="text-t3-purple-400 dark:text-t3-purple-300 ml-1 text-xs">
                          EN
                        </span>
                      )}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        </li>
      ))
    }
  </ul>
</div>
